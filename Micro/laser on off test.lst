0001                         * ;John Snoap, Chris Rich, and Aubin Mukamaishimwe
0002                         * ;Computer Systems
0003                         * ;DtoAConverter
0004                         
0005                         * ;Variables													COMMENTS
0006 00a0                    characterCount			EQU		$A0								;For our program
0007 00a1                    currentQuadrant			EQU		$A1								;For our program
0008 00a2                    shiftFlag			EQU		$A2								;For our program
0009 00a3                    mode				EQU		$A3								;For our program
0010 00b0                    bufferStart			EQU		$B0								;For our program
0011 a000                    keyboard			EQU		$A000								;For our hardware
0012 b000                    LCD				EQU		$B000								;For our hardware
0013 b001                    LCDD				EQU		$B001								;For our hardware
0014 c000                    DDRA				EQU		$C000								;For our hardware
0015 c001                    CRA				EQU		$C001								;For our hardware
0016 c002                    DDRB				EQU		$C002								;For our hardware
0017 c003                    CRB				EQU		$C003								;For our hardware
0018 c004                    bright				EQU		$C004								;For our hardware
0019 c005                    dim				EQU		$C005								;For our hardware
0020 0024                    stringLength			EQU		36								;The number of bits allocated for each laser string
0021 003c                    quadrantLength			EQU		60								;The horizontal length allocated for each quadrant
0022 e400                    LCDStart			EQU		$E400								;For our EEPROM
0023 e450                    testPatternStart		EQU		$E450								;For our EEPROM
0024 e500                    laserStart			EQU		$E500								;For our EEPROM
0025 ed00                    animationStart			EQU		$ED00								;For our EEPROM
0026                         * ;Variables end
0027                         
0028                         * ;Main														COMMENTS
0029 e000                    				ORG		$E000								;Start program
0030 e000 0e                 				CLI										;Clear the interupt flag
0031 e001 8e 00 ff           				LDS		#$FF								;Load the stack pointer
0032 e004 7f 00 a0           				CLR		characterCount							;Initialize characterCount
0033 e007 7f 00 a1           				CLR		currentQuadrant							;Initialize currentQuadrant
0034 e00a 7f 00 a2           				CLR		shiftFlag							;Initialize shiftFlag
0035 e00d 7f 00 a3           				CLR		mode								;Initialize mode (step 1 of 2)
0036 e010 7c 00 a3           				INC		mode								;Initialize mode (step 2 of 2)
0037 e013 ce b0 00           				LDX		#LCD								;LCD location -> X		Initialize LCD
0038 e016 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0039 e01a 86 01              				LDAA		#$1								;Load first command
0040 e01c b7 b0 00           				STAA		LCD								;Send first command -> LCD
0041 e01f 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0042 e023 86 30              				LDAA		#$30								;Load second command
0043 e025 b7 b0 00           				STAA		LCD								;Send second command -> LCD
0044 e028 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0045 e02c 86 08              				LDAA		#$8								;Load third command
0046 e02e b7 b0 00           				STAA		LCD								;Send third command -> LCD
0047 e031 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0048 e035 86 06              				LDAA		#$6								;Load fourth command
0049 e037 b7 b0 00           				STAA		LCD								;Send fourth command -> LCD
0050 e03a 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0051 e03e 86 3c              				LDAA		#$3C								;Load fifth command
0052 e040 b7 b0 00           				STAA		LCD								;Send fifth command -> LCD
0053 e043 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0054 e047 86 0f              				LDAA		#$F								;Load sixth command
0055 e049 b7 b0 00           				STAA		LCD								;Send sixth command -> LCD	Initialize LCD end
0056 e04c ce c0 01           				LDX		#CRA								;PIA CRA -> X			Initialize laser
0057 e04f 1d 00 04           				BCLR		0,X			%00000100				;Trust Watson -> PIA CRA
0058 e052 ce c0 00           				LDX		#DDRA								;PIA DDRA -> X
0059 e055 1c 00 ff           				BSET		0,X			$FF					;Trust Watson -> PIA DDRA
0060 e058 ce c0 01           				LDX		#CRA								;PIA CRA -> X
0061 e05b 1c 00 04           				BSET		0,X			%00000100				;Trust Watson -> PIA CRA
0062 e05e ce c0 03           				LDX		#CRB								;PIA CRB -> X
0063 e061 1d 00 04           				BCLR		0,X			%00000100				;Trust Watson -> PIA CRB
0064 e064 ce c0 02           				LDX		#DDRB								;PIA DDRB -> X
0065 e067 1c 00 ff           				BSET		0,X			$FF					;Trust Watson -> PIA DDRB
0066 e06a ce c0 03           				LDX		#CRB								;PIA CRB -> X
0067 e06d 1c 00 04           				BSET		0,X			%00000100				;Trust Watson -> PIA CRB	Initialize laser end
0068 e070 86 b0              				LDAA		#$B0								;Load (00000000)
0069 e072 c6 d0              				LDAB		#$D0								;Load (11111111)
0070 e074 b7 c0 04           laserOnOff			STAA		bright								;Send x-coordinate -> PIA
0071 e077 bd e0 f7           				JSR		delay4ms							;Delay for 4 milliseconds
0072 e07a f7 c0 05           				STAB		dim								;Send y-coordinate -> PIA
0073 e07d bd e0 f7           				JSR		delay4ms							;Delay for 4 milliseconds
0074 e080 20 f2              				BRA		laserOnOff							;Go to laserOnOff
0075                         * ;Main end
0076                         
0077                         * ;Interrupt Service Routine											COMMENTS
0078 e082 0e                 ISR				CLI										;Clear the interrupt flag
0079 e083 b6 a0 00           				LDAA		keyboard							;Load keypress
0080 e086 84 1f              				ANDA		#$1F								;Clear the first three bits
0081 e088 9b a2              				ADDA		shiftFlag							;Add shift
0082 e08a 81 03              				CMPA		#%11								;if (keypress == shift && !shiftFlag)
0083 e08c 27 3f              				BEQ		shiftOn								;shiftFlag = on
0084 e08e 81 13              				CMPA		#%10011								;else if (keypress == mode && !shiftFlag)
0085 e090 27 45              				BEQ		modePlusPlus							;mode++
0086 e092 81 23              				CMPA		#%100011							;else if (keypress == shift && shiftFlag)
0087 e094 27 3c              				BEQ		shiftOff							;shiftFlag = off
0088 e096 81 33              				CMPA		#%110011							;else if (keypress == mode && shiftFlag)
0089 e098 27 4d              				BEQ		modeMinusMinus							;mode--
0090 e09a ce 00 b0           				LDX		#bufferStart							;else, keypress is a character
0091 e09d d6 a0              				LDAB		characterCount							;characterCount -> B
0092 e09f 3a                 				ABX										;Add character count to buffer start
0093 e0a0 a7 00              				STAA		0,X								;Keypress -> buffer
0094 e0a2 ce e4 00           				LDX		#LCDStart							;Start LCD translation
0095 e0a5 16                 				TAB										;Keypress -> B
0096 e0a6 3a                 				ABX										;Add keypress to LCD start
0097 e0a7 a6 00              				LDAA		0,X								;Finish LCD translation
0098 e0a9 ce b0 00           				LDX		#LCD								;Prepare to send LCD translation to LCD
0099 e0ac 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0100 e0b0 b7 b0 01           				STAA		LCDD								;LCD translation -> LCD
0101 e0b3 7c 00 a0           				INC		characterCount							;characterCount++
0102 e0b6 86 05              				LDAA		#5								;5 -> A
0103 e0b8 d6 a0              				LDAB		characterCount							;characterCount -> B
0104 e0ba 11                 				CBA										;if (characterCount < 5)
0105 e0bb 26 0f              				BNE		done								;Go to done
0106 e0bd 7f 00 a0           				CLR		characterCount							;else, characterCount = 0  Need to add clear display
0107 e0c0 ce b0 00           				LDX		#LCD								;LCD location -> X		Clear LCD
0108 e0c3 1e 00 80 fc        				BRSET		0,X			%10000000	*			;LCD busy check
0109 e0c7 86 01              				LDAA		#$1								;Load first command
0110 e0c9 b7 b0 00           				STAA		LCD								;Send first command -> LCD
0111 e0cc 3b                 done				RTI										;Return from interrupt
0112 e0cd 14 a2 20           shiftOn				BSET		shiftFlag		%100000					;Shift on
0113 e0d0 20 fa              				BRA		done								;Go to done
0114 e0d2 15 a2 20           shiftOff			BCLR		shiftFlag		%100000					;Shift off
0115 e0d5 20 f5              				BRA		done								;Go to done
0116 e0d7 7c 00 a3           modePlusPlus			INC		mode								;mode++
0117 e0da 86 05              				LDAA		#5								;5 -> A
0118 e0dc d6 a3              				LDAB		mode								;mode -> B
0119 e0de 11                 				CBA										;if (mode < 5)
0120 e0df 26 eb              				BNE		done								;Go to done
0121 e0e1 86 01              				LDAA		#1								;else
0122 e0e3 97 a3              				STAA		mode								;mode = 1
0123 e0e5 20 e5              				BRA		done								;Go to done
0124 e0e7 7a 00 a3           modeMinusMinus			DEC		mode								;mode--
0125 e0ea 86 00              				LDAA		#0								;0 -> A
0126 e0ec d6 a3              				LDAB		mode								;mode -> B
0127 e0ee 11                 				CBA										;if (mode > 0)
0128 e0ef 26 db              				BNE		done								;Go to done
0129 e0f1 86 04              				LDAA		#4								;else
0130 e0f3 97 a3              				STAA		mode								;mode = 4
0131 e0f5 20 d5              				BRA		done								;Go to done
0132                         * ;Interrupt Service Routine end
0133                         
0134                         * ;Subrutine delay4ms												COMMENTS
0135 e0f7 36                 delay4ms			PSHA										;Saves A
0136 e0f8 86 64              				LDAA		#100								;80 * 50us = 4ms
0137 e0fa ce 00 07           outerLoop			LDX		#7								;Magic number for 50us
0138 e0fd 09                 innerLoop			DEX										;X--
0139 e0fe 8c 00 00           				CPX		#0								;Add 4 clock cycles
0140 e101 26 fa              				BNE		innerLoop							;If (X != 0) go to "innerLoop"
0141 e103 4a                 				DECA										;A--
0142 e104 26 f4              				BNE		outerLoop							;If (A != 0) go to "outerLoop"
0143 e106 32                 				PULA										;Restores A
0144 e107 39                 				RTS										;Return from subrutine
0145                         * ;Subrutine delay4ms end
0146                         
0147                         * ;EEPROM													COMMENTS
0148 e400                    				ORG		LCDStart							;LCD start vector
0149 e400 31                 				FCB		%00110001							;"1"
0150 e401 51                 				FCB		%01010001							;"Q"
0151 e402 41                 				FCB		%01000001							;"A"
0152 e403 1e                 				FCB		%00011110							;Shift on
0153 e404 32                 				FCB		%00110010							;"2"
0154 e405 57                 				FCB		%01010111							;"W"
0155 e406 53                 				FCB		%01010011							;"S"
0156 e407 58                 				FCB		%01011000							;"X"
0157 e408 33                 				FCB		%00110011							;"3"
0158 e409 45                 				FCB		%01000101							;"E"
0159 e40a 44                 				FCB		%01000100							;"D"
0160 e40b 43                 				FCB		%01000011							;"C"
0161 e40c 34                 				FCB		%00110100							;"4"
0162 e40d 52                 				FCB		%01010010							;"R"
0163 e40e 46                 				FCB		%01000110							;"F"
0164 e40f 56                 				FCB		%01010110							;"V"
0165 e410 35                 				FCB		%00110101							;"5"
0166 e411 54                 				FCB		%01010100							;"T"
0167 e412 47                 				FCB		%01000111							;"G"
0168 e413 ff                 				FCB		%11111111							;Mode++
0169 e420                    				ORG		LCDStart+32							;LCD start vector + 32
0170 e420 36                 				FCB		%00110110							;"6"
0171 e421 59                 				FCB		%01011001							;"Y"
0172 e422 48                 				FCB		%01001000							;"H"
0173 e423 20                 				FCB		%00100000							;Shift off
0174 e424 37                 				FCB		%00110111							;"7"
0175 e425 55                 				FCB		%01010101							;"U"
0176 e426 4a                 				FCB		%01001010							;"J"
0177 e427 42                 				FCB		%01000010							;"B"
0178 e428 38                 				FCB		%00111000							;"8"
0179 e429 49                 				FCB		%01001001							;"I"
0180 e42a 4b                 				FCB		%01001011							;"K"
0181 e42b 4e                 				FCB		%01001110							;"N"
0182 e42c 39                 				FCB		%00111001							;"9"
0183 e42d 4f                 				FCB		%01001111							;"O"
0184 e42e 4c                 				FCB		%01001100							;"L"
0185 e42f 4d                 				FCB		%01001101							;"M"
0186 e430 30                 				FCB		%00110000							;"0"
0187 e431 50                 				FCB		%01010000							;"P"
0188 e432 5a                 				FCB		%01011010							;"Z"
0189 e433 00                 				FCB		%00000000							;Mode--
0190                         
0191 fff2                    				ORG		$FFF2								;ISR vector
0192 fff2 e0 82              				FDB		ISR								;ISR address
0193 fffe                    				ORG		$FFFE								;Reset vector
0194 fffe e0 00              				FDB		$E000								;Reset address
0195                         * ;EEPROM end  							;Reset address
